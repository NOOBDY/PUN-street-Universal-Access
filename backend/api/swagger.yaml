openapi: 3.0.3
info:
  title: PUN street Universal Access - OpenAPI 3.0
  description: pua
  version: v1
servers:
- url: http://localhost:5000/api/v1
paths:
  /store/{storeID}:
    get:
      tags:
      - customer
      - store
      summary: return a store by ID
      parameters:
      - name: storeID
        in: path
        description: The ID of the store to return.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      responses:
        "200":
          description: A Store object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreInfo'
        "500":
          description: Unexpected error
  /stores:
    get:
      tags:
      - seller
      - customer
      - store
      summary: get all store
      responses:
        "200":
          description: return store array
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreArray'
        "500":
          description: Unexpected error
  /store/{storeID}/add-product:
    post:
      tags:
      - seller
      - store
      summary: add a product in store.
      parameters:
      - name: storeID
        in: path
        description: The ID of the store to return.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      requestBody:
        description: a new product
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInfo'
      responses:
        "200":
          description: ok
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /seller/{userID}/create-store:
    post:
      tags:
      - seller
      - store
      summary: create new store
      parameters:
      - name: userID
        in: path
        description: The ID of the store to return.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      requestBody:
        description: store info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreInfo'
      responses:
        "200":
          description: ok
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /product/{productID}:
    get:
      tags:
      - customer
      - product
      summary: return a product by ID
      parameters:
      - name: productID
        in: path
        description: The ID of the product to return.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      responses:
        "200":
          description: A product object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductInfo'
        "500":
          description: Unexpected error
    delete:
      tags:
      - seller
      - product
      summary: deactive a product by ID
      parameters:
      - name: productID
        in: path
        description: The ID of the product should be deleted.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      responses:
        "200":
          description: delete success
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /store/{storeID}/products:
    get:
      tags:
      - customer
      - product
      summary: get all products by store ID
      parameters:
      - name: storeID
        in: path
        description: The ID of the store to return.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      responses:
        "200":
          description: return product array
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductArray'
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /cart:
    post:
      tags:
      - customer
      - cart
      summary: add product to cart 
      requestBody:
        description: add a new cart.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartInfo'
        required: true
      responses:
        "200":
          description: A cart object.
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /customer/{userID}/cart/{cartID}/delete/product/{productID}:
    delete:
      tags:
      - customer
      - cart
      summary: remove product from cart
      parameters:
      - name: userID
        in: path
        description: The ID of the user to return.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      - name: cartID
        in: path
        description: The ID of the cart to return.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      responses:
        "200":
          description: delete success
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /customer/get-info/{userID}:
    get: 
      tags:
      - customer
      - user
      summary: get user info by ID
      parameters:
      - name: userID
        in: path
        description: The ID of the user to return.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      responses:
        "200":
          description: return user info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserData'
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /store/{storeID}/discounts:
    get:
      tags:
      - customer
      - discount
      summary: get discount by store ID
      parameters:
      - name: storeID
        in: path
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscountArray'
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /store/{storeID}/discount:
    post:
      tags:
      - discount
      summary: create a new discount
      parameters:
      - name: storeID
        in: path
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      responses:
        "200":
          description: ok
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /discount/{discountID}:
    delete:
      tags:
      - discount
      summary: delete a discount by ID
      parameters:
      - name: discountID
        in: path
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      responses:
        "200":
          description: ok
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /admin/ban-user/{userID}:
    put:
      tags:
      - admin
      - user
      summary: ban a user by ID
      parameters:
      - name: userID
        in: path
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      responses:
        "200":
          description: ok
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /admin/unban-user/{userID}:
    put:
      tags:
      - admin
      - user
      summary: unban a user by ID
      parameters:
      - name: userID
        in: path
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      responses:
        "200":
          description: ok
        "400":
          description: bad request
        "500":
          description: Unexpected error
  /admin/edit-user/{userID}:
    put:
      tags:
      - admin
      - user
      summary: edit user info by ID
      parameters:
      - name: userID
        in: path
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
      requestBody:
        description: user info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserData'
      responses:
        "200":
          description: ok
        "400":
          description: bad request
        "500":
          description: Unexpected error
components:
  schemas:
    StoreInfo:
      required:
      - address
      - email
      - name
      - store_id
      - rate
      type: object
      properties:
        store_id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: i'm pasta
        address:
          type: string
          example: pun street
        email:
          type: string
          example: pasta@pasta.com
        rate:
          type: integer
          format: int64
          example: 5
        picture:
          type: string
          example: https://i.imgur.com/1.jpg
    StoreArray:
      type: array
      items:
        $ref: '#/components/schemas/StoreInfo'
      x-schema-name: StoreArray
    ProductInfo:
      required:
      - product_id
      - name
      - store_id
      - description
      - picture
      - price
      - stock
      - status
      type: object
      properties:
        product_id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: pasta
        store_id:
          type: integer
          format: int64
          example: 1
        description:
          type: string
          example: tasty pasta
        picture:
          type: string
          example: https://i.imgur.com/1.jpg
        price:
          type: integer
          format: int64
          example: 9999
        stock:
          type: integer
          format: int64
          example: 100
        status:
          type: integer
          format: int64
          example: 1
    ProductArray:
      type: array
      items:
        $ref: '#/components/schemas/ProductInfo'
      x-schema-name: ProductArray
    CartInfo:
      required:
      - customer_id
      - product_id
      - product_quantity
      - cart_id
      - product_price
      - discount_id
      type: object
      properties:
        product_quantity:
          type: integer
          format: int64
          example: 10
        customer_id:
          type: integer
          format: int64
          example: 1
        product_id:
          type: integer
          format: int64
          example: 1
        cart_id:
          type: integer
          format: int64
          example: 1
        product_price:
          type: integer
          format: int64
          example: 9999
        discount_id:
          type: integer
          format: int64
          example: 1
    DiscountInfo:
      required:
      - discount_id
      - discount_type
      - status
      type: object
      properties:
        discount_id:
          type: integer
          format: int64
          example: 1
        discount_type:
          type: integer
          format: int64
          example: 1
        status:
          type: integer
          format: int64
          example: 1
    DiscountArray:
      type: array
      items:
        $ref: '#/components/schemas/DiscountInfo'
      x-schema-name: ProductArray
    UserData:
      required:
      - user_id
      - user_name
      - user_email
      - authority
      - password
      - address
      - phone
      - status
      - cart_id
      type: object
      properties:
        user_id:
          type: integer
          format: int64
          example: 1
        user_name:
          type: string
          example: pasta
        user_email:
          type: string
          example:
        authority:
          type: integer
          format: int64
          example: 100
        password:
          type: string
          example: "123456"
        address:
          type: string
          example: pun street
        phone: 
          type: string
          example: "0912345678"
        status:
          type: integer
          format: int64
          example: 1
        cart_id:
          type: integer
          format: int64
          example: 1