openapi: 3.0.3
info:
  title: PUN street Universal Access - OpenAPI 3.0
  description: pua
  version: v1
servers:
- url: http://localhost:5000/api/v1
paths:
  /store/{storeID}:
    get:
      tags:
      - store
      summary: return a store by ID
      parameters:
      - name: storeID
        in: path
        description: The ID of the store to return.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "1"
              x-content-type: application/json
      responses:
        "200":
          description: A Store object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreInfo'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /products:
    post:
      tags:
      - product
      summary: return products array  by store ID
      requestBody:
        description: store id.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/products_body'
        required: true
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductArray'
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    StoreInfo:
      required:
      - address
      - email
      - name
      - phone
      - storeId
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: i'm pasta
        address:
          type: string
          example: pun street
        email:
          type: string
          example: pasta@pasta.com
        phone:
          type: string
          example: "0912345678"
      example:
        address: pun street
        phone: "0912345678"
        name: i'm pasta
        id: 1
        email: pasta@pasta.com
    ProductInfo:
      required:
      - catogoryId
      - description
      - name
      - price
      - productId
      - storage
      type: object
      properties:
        productId:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: pasta
        catogoryId:
          type: integer
          format: int64
          example: 1
        description:
          type: string
          example: tasty pasta
        price:
          type: integer
          format: int64
          example: 9999
        storage:
          type: integer
          format: int64
          example: 1
      example:
        productId: 1
        catogoryId: 1
        price: 9999
        name: pasta
        description: tasty pasta
        storage: 1
    ProductArray:
      type: array
      items:
        $ref: '#/components/schemas/ProductInfo'
      x-schema-name: ProductArray
    Error:
      required:
      - code
      - message
      type: object
      properties:
        message:
          type: string
          example: internal error
        code:
          type: integer
          example: 3000
    products_body:
      required:
      - StoreId
      type: object
      properties:
        StoreId:
          type: integer
          format: int64
          example: 1
